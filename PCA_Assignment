import imageio
import numpy as np
import numpy.linalg as lg
import matplotlib.pyplot as plt
import os
import sys

VECTORS_TO_KEEP = [15, 100, 200]

# Make sure image is provided and exists in file system
def load_image():
    if len(sys.argv) != 2:
        print('Please supply an image file\nUsage: python penny.py example.jpg')
        exit(1)

    image = sys.argv[1]

    if not os.path.exists(image):
        print('Image file is invalid')
        exit(1)
    return imageio.imread(image)

# Calc total amount of pixels and divide sum of total values
def find_mean(image):
    sum = 0
    total_pixels = image.shape[0] * image.shape[1]
    for row in range(image.shape[0]):
        for col in range(image.shape[1]):
            sum += image[row][col]
    return sum / total_pixels

# Subtract the value of mean from each pixel in image (value cannot be negative)
def subtract_mean(mean, image):
    for row in range(image.shape[0]):
        for col in range(image.shape[1]):
            image[row][col] -= mean
    return image

def get_covariance(image):
    return np.cov(image)

# Returns eigenvectors and eigenvalues as a tuple, where vals[i] corresponds to vectors[:, i]
def find_eig_vals_vect(img_cov):
    vals, vectors = lg.eig(img_cov)
    return vals, vectors

# Driver function
def run():
    img = load_image()
    m = find_mean(img)
    img_sub_mean = subtract_mean(m, img)
    cov = get_covariance(img_sub_mean)
    eig_vals, eigVects = find_eig_vals_vect(cov) # eig_vals[i] corresponds to eigVects[:, i]
    # -------> ### Left off on step 7 ###  <------- #

run()